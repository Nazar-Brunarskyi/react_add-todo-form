{"version":3,"sources":["components/UserInfo/UserInfo.tsx","components/TodoInfo/TodoInfo.tsx","components/TodoList/TodoList.tsx","api/users.ts","api/todos.ts","additionalFunction/getUser.ts","App.tsx","additionalFunction/getTheLargestId.ts","index.tsx"],"names":["UserInfo","user","className","href","email","name","TodoInfo","todo","id","title","completed","TodoList","todos","map","username","userId","getUser","users","find","App","useState","todosFromServer","usersFromServer","setTodos","userForTodo","setUser","titleForTodo","setTitele","incorrectTitle","setTitleValidation","incorrectUser","setUserValidation","onSubmit","event","preventDefault","isTitleCorrect","isUserCorrect","isDataCorrect","newTodo","list","sort","a","b","currentList","action","method","type","placeholder","value","onChange","currentTarget","disabled","person","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.a2f4a5dd.chunk.js","sourcesContent":["import React from 'react';\nimport { User } from '../../types/user';\n\ntype Props = {\n  user: User,\n};\n\nexport const UserInfo: React.FC<Props> = ({ user }) => {\n  return (\n    <a className=\"UserInfo subtitle\" href={`mailto:${user.email}`}>\n      {user.name}\n    </a>\n  );\n};\n","import React from 'react';\nimport { Todo } from '../../types/todo';\nimport { UserInfo } from '../UserInfo';\n\ntype Props = {\n  todo: Todo,\n};\n\nexport const TodoInfo: React.FC<Props> = ({ todo }) => {\n  const {\n    id,\n    title,\n    completed,\n    user,\n  } = todo;\n\n  return (\n    <article\n      data-id={id}\n      className={`TodoInfo ${completed && 'TodoInfo--completed'}`}\n      key={todo.id}\n    >\n      <h2 className=\"TodoInfo__title title is-4\">\n        {title}\n      </h2>\n\n      {user && <UserInfo user={user} />}\n    </article>\n  );\n};\n","import React from 'react';\nimport { Todo } from '../../types/todo';\nimport { TodoInfo } from '../TodoInfo';\n\ntype Props = {\n  todos: Todo[],\n};\n\nexport const TodoList: React.FC<Props> = ({ todos }: Props) => (\n  <section className=\"TodoList\">\n    {\n      todos.map(todo => {\n        return (\n          <TodoInfo\n            key={todo.id}\n            todo={todo}\n          />\n        );\n      })\n    }\n  </section>\n);\n","export default [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz',\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv',\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net',\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org',\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca',\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info',\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz',\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me',\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io',\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz',\n  },\n];\n","export default [\n  {\n    id: 1,\n    title: 'delectus aut autem',\n    completed: true,\n    userId: 1,\n  },\n  {\n    id: 15,\n    title: 'some other todo',\n    completed: false,\n    userId: 1,\n  },\n  {\n    id: 2,\n    title: 'quis ut nam facilis et officia qui',\n    completed: false,\n    userId: 4,\n  },\n];\n","import { User } from '../types/user';\n\nexport function getUser(users: User[], id: number) : User | null {\n  return users.find(user => user.id === id) || null;\n}\n","import { useState } from 'react';\nimport './App.scss';\nimport 'bulma/css/bulma.min.css';\nimport { TodoList } from './components/TodoList';\n\nimport usersFromServer from './api/users';\nimport todosFromServer from './api/todos';\nimport { Todo } from './types/todo';\nimport { getTheLargestId } from './additionalFunction/getTheLargestId';\nimport { getUser } from './additionalFunction/getUser';\n\nexport const App = () => {\n  const [todos, setTodos] = useState(\n    todosFromServer.map(todo => ({\n      ...todo,\n      user: getUser(usersFromServer, todo.userId),\n    })),\n  );\n  const [userForTodo, setUser] = useState(0);\n  const [titleForTodo, setTitele] = useState('');\n  const [incorrectTitle, setTitleValidation] = useState(false);\n  const [incorrectUser, setUserValidation] = useState(false);\n\n  const isDataCorrect = () => {\n    const isTitleCorrect = titleForTodo !== '';\n    const isUserCorrect = userForTodo !== 0;\n\n    if (!isTitleCorrect) {\n      setTitleValidation(true);\n    } else {\n      setTitleValidation(false);\n    }\n\n    if (!isUserCorrect) {\n      setUserValidation(true);\n    } else {\n      setUserValidation(false);\n    }\n\n    return isTitleCorrect && isUserCorrect;\n  };\n\n  const addTodo = (\n    event: React.FormEvent<HTMLFormElement>,\n  ): void => {\n    event.preventDefault();\n\n    if (isDataCorrect()) {\n      const newTodo: Todo = {\n        id: getTheLargestId(todos) + 1,\n        title: titleForTodo,\n        completed: false,\n        userId: userForTodo,\n        user: getUser(usersFromServer, userForTodo),\n      };\n\n      setTodos(currentList => [...currentList, newTodo]);\n      setUser(0);\n      setTitele('');\n    }\n  };\n\n  return (\n    <div\n      className=\"\n        App\n        is-flex\n        is-flex-direction-column\n        is-align-items-center\n      \"\n    >\n      <h1 className=\"title\">Add todo form</h1>\n\n      <form\n        onSubmit={addTodo}\n        action=\"/api/users\"\n        method=\"POST\"\n        className=\"form\"\n      >\n        <div className=\"field\">\n          <input\n            type=\"text\"\n            data-cy=\"titleInput\"\n            placeholder=\"Enter a title\"\n            value={titleForTodo}\n            onChange={(event) => {\n              setTitele(event.currentTarget.value);\n              setTitleValidation(false);\n            }}\n            className=\"input is-medium\"\n          />\n          {\n            incorrectTitle\n            && (<span className=\"error\">Please enter a title</span>)\n          }\n        </div>\n\n        <div className=\"field\">\n          <select\n            data-cy=\"userSelect\"\n            value={userForTodo}\n            onChange={(event) => {\n              setUser(+event.currentTarget.value);\n              setUserValidation(false);\n            }}\n            className=\"select is-medium\"\n          >\n            <option value=\"0\" disabled>Choose a user</option>\n            {usersFromServer.map(person => (\n              <option\n                key={person.id}\n                value={person.id}\n              >\n                {person.name}\n              </option>\n            ))}\n          </select>\n\n          {\n            incorrectUser\n            && (<span className=\"error\">Please choose a user</span>)\n          }\n        </div>\n\n        <button\n          type=\"submit\"\n          data-cy=\"submitButton\"\n          className=\"button is-success\"\n        >\n          Add\n        </button>\n      </form>\n\n      <TodoList todos={todos} />\n    </div>\n  );\n};\n","import { Todo } from '../types/todo';\n\nexport function getTheLargestId(list: Todo[]): number {\n  return list\n    .map(todo => todo.id)\n    .sort((a, b) => b - a)[0];\n}\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}